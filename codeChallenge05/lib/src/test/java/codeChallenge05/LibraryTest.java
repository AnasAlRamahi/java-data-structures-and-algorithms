/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package codeChallenge05;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class LibraryTest {

    //CodeChallenge06 Testing methods:

    @Test
    void addOneToTheEnd(){
        LinkedList ll = new LinkedList();

        ll.append(5);

        Node current = ll.Head;
        String actual = "";
        while(current != null){
            actual +=  "{ " + current.value + " } -> ";
            current = current.next;
        }
        actual += "NULL";

        String expected = "{ 5 } -> NULL";

        assertEquals(expected,actual);
    }

    @Test
    void addMultipleToTheEnd() {
        LinkedList ll = new LinkedList();
        Node n1 = new Node(1);
        Node n2 = new Node(2);
        ll.Head = n1;
        n1.next = n2;

        ll.append(5);
        ll.append(6);
        ll.append(7);

        Node current = ll.Head;
        String actual = "";
        while (current != null) {
            actual += "{ " + current.value + " } -> ";
            current = current.next;
        }
        actual += "NULL";

        String expected = "{ 1 } -> { 2 } -> { 5 } -> { 6 } -> { 7 } -> NULL";

        assertEquals(expected, actual);
    }

    @Test
    void addBeforeMiddle(){
        LinkedList ll = new LinkedList();
        Node n1 = new Node(1);
        Node n2 = new Node(2);
        Node n3 = new Node(3);
        Node n4 = new Node(4);

        ll.Head = n1;
        n1.next = n2;
        n2.next = n3;
        n3.next = n4;

        ll.insertBefore(3, 10);

        Node current = ll.Head;
        String actual = "";
        while(current != null){
            actual +=  "{ " + current.value + " } -> ";
            current = current.next;
        }
        actual += "NULL";

        String expected = "{ 1 } -> { 2 } -> { 10 } -> { 3 } -> { 4 } -> NULL";

        assertEquals(expected,actual);
    }

    @Test //This tests if it can add one node or multiple nodes at the end of the linked list:
    void addBeforeFirst(){
        LinkedList ll = new LinkedList();
        Node n1 = new Node(1);
        Node n2 = new Node(2);
        Node n3 = new Node(3);
        Node n4 = new Node(4);
        ll.Head = n1;
        n1.next = n2;
        n2.next = n3;
        n3.next = n4;

        ll.insertBefore(1, 10);

        Node current = ll.Head;
        String actual = "";
        while(current != null){
            actual +=  "{ " + current.value + " } -> ";
            current = current.next;
        }
        actual += "NULL";

        String expected = "{ 10 } -> { 1 } -> { 2 } -> { 3 } -> { 4 } -> NULL";

        assertEquals(expected,actual);

    }

    @Test
    void addAfterMiddle(){
        LinkedList ll = new LinkedList();
        Node n1 = new Node(1);
        Node n2 = new Node(2);
        Node n3 = new Node(3);
        Node n4 = new Node(4);

        ll.Head = n1;
        n1.next = n2;
        n2.next = n3;
        n3.next = n4;

        ll.insertAfter(2, 10);

        Node current = ll.Head;
        String actual = "";
        while(current != null){
            actual +=  "{ " + current.value + " } -> ";
            current = current.next;
        }
        actual += "NULL";

        String expected = "{ 1 } -> { 2 } -> { 10 } -> { 3 } -> { 4 } -> NULL";

        assertEquals(expected,actual);
    }

    @Test
    void addAfterLast(){
        LinkedList ll = new LinkedList();
        Node n1 = new Node(1);
        Node n2 = new Node(2);
        Node n3 = new Node(3);
        Node n4 = new Node(4);

        ll.Head = n1;
        n1.next = n2;
        n2.next = n3;
        n3.next = n4;

        ll.insertAfter(4, 10);

        Node current = ll.Head;
        String actual = "";
        while(current != null){
            actual +=  "{ " + current.value + " } -> ";
            current = current.next;
        }
        actual += "NULL";

        String expected = "{ 1 } -> { 2 } -> { 3 } -> { 4 } -> { 10 } -> NULL";

        assertEquals(expected,actual);
    }

    //CodeChallenge07 Testing methods:
    @Test
    void kGreaterThanLength(){
        LinkedList ll = new LinkedList();

        ll.append(1);
        ll.append(2);
        ll.append(3);
        ll.append(4);
        ll.append(5);

        assertThrows(Exception.class, () -> {ll.kthFromEnd(66);});
    }

    @Test
    void kEqualsLength(){
        LinkedList ll = new LinkedList();

        ll.append(1);
        ll.append(2);
        ll.append(3);
        ll.append(4);
        ll.append(5);

        assertThrows(Exception.class, () -> {ll.kthFromEnd(5);});
    }

    @Test
    void kNotPositive(){
        LinkedList ll = new LinkedList();

        ll.append(1);
        ll.append(2);
        ll.append(3);
        ll.append(4);

        assertThrows(Exception.class, () -> {ll.kthFromEnd(-1);});
    }

    @Test
    void listSizeOne(){
        LinkedList ll = new LinkedList();
        ll.append(10);
        Integer actual = 0;
        try{
            actual = ll.kthFromEnd(0);
        }catch(Exception e){
            e.printStackTrace();

        };
        assertEquals(10, actual);
    }

    @Test
    void kInTheMiddle(){
        LinkedList ll = new LinkedList();
        ll.append(10);
        ll.append(11);
        ll.append(12);
        ll.append(13);
        ll.insertBefore(13, 100);
        ll.insertAfter(10, 40);

        Integer actual = 0;
        try{
            actual = ll.kthFromEnd(4);
        }catch(Exception e){
            e.printStackTrace();

        };
        assertEquals(40, actual);
    }


}

